{% extends 'base.html.twig' %}

{% block title %}Liste du matériel
{% endblock %}

{% block body %}
 
	<div class="px-4">
		<h1 class="display-3">Stock de materiel</h1>
		{# <div>
				{% for material in materials %}
				<li>{{material.name}}</li>
				{% endfor %}
				</div> #}
		{# <div style="max-width: 40vw"> #}
		<table style="width: 100%" id="material-list" class="table table-hover table-striped nowrap">
			<thead>
				<tr>
					<th scope="col">id</th>
					<th scope="col">Nom</th>
					<th scope="col">Date de création</th>
					<th scope="col">Prix HT</th>
					<th scope="col">prix TTC</th>
					<th scope="col">Quantité</th>
					<th scope="col">Décrémenter</th>
					<th scope="col">m</th>
				</tr>
			</thead>
			<tfooter>
				<tr>
					<th scope="col">id</th>
					<th scope="col">Nom</th>
					<th scope="col">Date de création</th>
					<th scope="col">Prix HT</th>
					<th scope="col">prix TTC</th>
					<th scope="col">Quantité</th>
					<th scope="col"></th>
					<th
						scope="col">
						{# <button><a class="btn btn-primary" href="{{ path('app_material_minus', {id: data}) }}" role="button">Décrémenter</button> #}
						<button type="button" class="btn">Modifier</button>
						<button type="button" class="btn">voir</button>
					</th>
				</tr>
			</tfooter>
		</table>
		{# </div> #}
		<button>
			<a class="btn btn-primary" href="{{ path('app_material_new') }}" role="button">Ajouter</a>
		</button>
	</div>
{% endblock %}

{% block customscript %}
	<script>
 let url_path = "{{ url('app_material_index') }}"
			$(document).ready(function () {
			var datatable = $("#material-list").DataTable({
				ajax: url_path,
				language: {
				url: "//cdn.datatables.net/plug-ins/2.0.1/i18n/fr-FR.json",
				},
				processing: true,
				serverSide: true,
				pageLength: 5,
				paging: true,
				lengthMenu: [5, 10, 15, 20, { label: "All", value: -1 }],
				select: true,
				responsive: {
				details: {
					display: DataTable.Responsive.display.modal({
					header: function (row, type, val, meta) {
						var data = row.data();
						return "Details for " + data["name"];
					},
					}),
					renderer: DataTable.Responsive.renderer.tableAll({
					tableClass: "table",
					}),
				},
				},
				layout: {
					top2End: {
						buttons: ["pdfHtml5"],
					},
					bottomNEnd: {
						buttons: [
						{	
							extend: 'selected',
							text : 'Modifier',
							className : 'update', 
							action: function (e, dt, button, config) {
								
								var data = dt.row({ selected: true }).data();
								var id = data["id"];
								var id_name
								var param = {id: ~ "id" };
								var path = "path('app_material_show' : " + id +")";
								let link = '<a href="{{'path' }}">Modifier</a>'
								// let url = '/material/update/'+id;
								//var link = "{{path('app_material_show', {id: "id"}) }}";
								
								console.log(link);
						
								//var link = {[path + param] |join} ;
								//console.log(link);
								//return link;
								/*let link = '<a href="/material/update/'+ id +'">Modifier</a>'
								 return link;
								e.stopPropagation();
								this.popover("app_material_new");*/
							},
						},
						],
					},
				},
				
				// buttons : true,
				
				columnDefs: [
				{
					target: [0, 2, 3, 4, 5, 6],
					searchable: false,
				},
				{
					target: [ 3, 6],
					orderable: false,
				},
				{
					target: 6,
					data: "id",
					//   render:
					// function (data) {
					//   let link = '<a href="/material/update/'+ data +'">Modifier</a>'
					//   return link;
	
					// },
					//   if( table.rows( { selected: true } ).count() == table.data().count()){
					//     table.rows().deselect();
					// }
				},
				{
				target: 2,
				render: function (data, type) {
				let created_at = new Date(data);
				return formatDate(created_at);
				},
				},
				],
				columns: [
				{
					name: "id",
					data: "id",
				},
				{
					name: "name",
					data: "name",
				},
				{
					name: "createdAt",
					data: "createdAt",
				},
				{
					name: "priceBeforeTax",
					data: "priceBeforeTax",
				},
				{
					name: "priceIncVAT",
					data: "priceIncVAT",
				},
				{
					name: "quantity",
					data: "quantity",
				},
				{
					name: "decrement",
					data: null,
					className: "decrement",
					render: function(data, type, row ) {
						return `<button class=" decrement btn btn-sm btn-secondary d-flex align-items-center">
							<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-dash-lg" viewBox="0 0 16 16">
  								<path fill-rule="evenodd" d="M2 8a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11A.5.5 0 0 1 2 8"/>
							</svg>
						</button>`
					}
				},
				{
					name: "modifier",
					data: "id",
					// render: function (data) {
					//   // let link = '<a href="/material/update/'+ data +'">Modifier</a>'
					//   // return [link, "a"];
					//   let details = '<a href="/material/update/' + data + '">Voir</a>';
					//   let update = '<a href="/material/update/' + data + '">Modifier</a>';
					//   let decrement =
					//     '<a href="/material/update/' + data + '">Décrémenter</a>';
					//   return [details, update, decrement];
					// },
				},
				],
				
			});

			datatable.on('click','td.decrement', function(){
				var cell = datatable.cell(this);
				console.log("cell",cell);
				var row = datatable.cell(this).render();
				console.log("row",row);
				var id = row["id"];
				console.log("id",id);
				datatable.on('preXhr.dt', function (e, settings, data) {
				data.material_id = id;
				});
				
				cell.data(cell.data()-1).draw();
				console.log(datatable.cell().node());

			});
		
		
			
	});
			function update(id){
				 let update = '<a href="/material/update/' + id + '">Modifier</a>';
				 return update
			}
	
			/**
			* Permet de convertir un objet date en chaine de caractère au format local FR
			* @param {Date} date
			* @returns string
			*/
			function formatDate(date) {
			// On ajoute un 0 devant lorsque la valeur de la date est inférieure à 10
			let day = date.getDay() < 10 ? `0${date.getDay()}` : date.getDay();
			// On ajoute un 0 devant lorsque la valeur de la date est inférieure à 10. On ajoute 1 car les mois sont numéro de 0 à 11 en JS
			let month =
				date.getMonth() + 1 < 10 ? `0${date.getMonth() + 1}` : date.getMonth() + 1;
			let year = date.getFullYear();
			return `${day}/${month}/${year}`;
			}
			/*function decrement(data) {
			var quantity = data.quantity;
			if (quantity > 1) {
				var newQuantity = quantity - 1;
			}
			return newQuantity;
			}*/

		
	</script>
{% endblock %}
